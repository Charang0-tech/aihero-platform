'use client'

import React, { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { 
  ArrowLeft, 
  Play, 
  Pause, 
  CheckCircle2, 
  Clock, 
  Target, 
  Code,
  BookOpen,
  Zap,
  Star,
  Trophy,
  Terminal,
  Lightbulb,
  MessageCircle,
  CheckCircle,
  AlertCircle
} from 'lucide-react'
import { useProgressStore } from '../../../stores/useProgressStore'
import { getLessonById, checkLessonAccess } from '../../../lib/curriculum'

export default function LessonPage() {
  const params = useParams()
  const lessonId = params.id as string
  
  const [activeTab, setActiveTab] = useState('concept')
  const [code, setCode] = useState('')
  const [output, setOutput] = useState('')
  const [isRunning, setIsRunning] = useState(false)
  const [challenge, setChallenge] = useState('')
  const [userSolution, setUserSolution] = useState('')
  const [feedback, setFeedback] = useState('')
  const [startTime, setStartTime] = useState<Date | null>(null)
  
  const { 
    lessons, 
    startLesson, 
    completeLesson, 
    updateLessonProgress,
    subscription,
    checkAccess,
    upgradeSubscription
  } = useProgressStore()
  
  // Get lesson from curriculum
  const lesson = getLessonById(lessonId)
  const lessonProgress = lessons[lessonId]
  
  useEffect(() => {
    if (lesson && !lessonProgress) {
      startLesson(lessonId)
      setStartTime(new Date())
    }
  }, [lesson, lessonProgress, lessonId, startLesson])

  // Lesson content based on lesson ID
  const getLessonContent = (lessonId: string) => {
    const content: { [key: string]: any } = {
      'w1-mon': {
        concept: `# Python Installation & Basic Syntax

Python is a powerful, easy-to-learn programming language that's perfect for beginners and professionals alike.

## What You'll Learn Today:
- How Python code works
- Variables and data types
- Basic operations
- Your first program

## Why Python?
- Readable and simple syntax
- Powerful for AI and data science
- Huge community and job market
- Used by Google, Netflix, Instagram

Let's start with the fundamentals that will be the foundation for everything else you build!`,

        examples: [
          {
            title: "Hello World - Your First Program",
            code: `# This is a comment - Python ignores it
print("Hello, World!")
print("Welcome to Python programming!")

# Variables store data
name = "Alex"
age = 25

print(f"Hi {name}, you are {age} years old!")`,
            explanation: "This shows the basics: comments (#), print statements, variables, and string formatting with f-strings."
          },
          {
            title: "Numbers and Math Operations",
            code: `# Numbers in Python
number1 = 10
number2 = 3.14
big_number = 1_000_000  # Underscores make large numbers readable

# Basic math
addition = 5 + 3        # 8
subtraction = 10 - 4    # 6
multiplication = 6 * 7  # 42
division = 15 / 4       # 3.75
integer_division = 15 // 4  # 3
remainder = 15 % 4      # 3
power = 2 ** 3          # 8

print(f"Addition: {addition}")
print(f"Division: {division}")
print(f"Power: {power}")`,
            explanation: "Python handles different types of numbers and math operations. Notice how // gives you integer division and % gives you the remainder."
          }
        ],

        challenge: {
          title: "Build a Simple Calculator",
          description: "Create a calculator that asks for two numbers and an operation (+, -, *, /) and shows the result.",
          starter_code: `# Your calculator code here
# Hint: Use input() to get user input
# Hint: Convert strings to numbers with int() or float()

num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
operation = input("Enter operation (+, -, *, /): ")

# Your code here to calculate and print the result`,
          solution: `num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
operation = input("Enter operation (+, -, *, /): ")

if operation == "+":
    result = num1 + num2
elif operation == "-":
    result = num1 - num2
elif operation == "*":
    result = num1 * num2
elif operation == "/":
    if num2 != 0:
        result = num1 / num2
    else:
        result = "Error: Cannot divide by zero"
else:
    result = "Error: Invalid operation"

print(f"Result: {result}")`
        }
      },

      'w1-tue': {
        concept: `# Functions, Variables & Control Flow

Today we're building the logic and decision-making power of your programs.

## What You'll Master:
- If/else statements for decisions
- Loops for repetition
- Functions for reusable code
- Building interactive programs

## Real-World Applications:
- User input validation
- Game logic
- Data processing
- Automated decision making

These are the building blocks that turn simple scripts into powerful programs!`,

        examples: [
          {
            title: "If/Else Decisions",
            code: `# Making decisions in code
age = int(input("Enter your age: "))

if age >= 18:
    print("You can vote!")
    if age >= 21:
        print("You can also drink alcohol (in the US)!")
elif age >= 13:
    print("You're a teenager!")
else:
    print("You're a kid!")

# Multiple conditions
weather = input("How's the weather? (sunny/rainy/cloudy): ")
temperature = int(input("Temperature in Fahrenheit: "))

if weather == "sunny" and temperature > 70:
    print("Perfect day for a picnic!")
elif weather == "rainy" or temperature < 40:
    print("Better stay inside!")
else:
    print("Decent day to go out!")`,
            explanation: "If/else statements let your program make decisions. Use 'and', 'or', and 'not' to combine conditions."
          },

          {
            title: "Loops for Repetition",
            code: `# For loops - when you know how many times
print("Counting to 5:")
for i in range(1, 6):
    print(f"Count: {i}")

# Loop through a list
fruits = ["apple", "banana", "orange"]
for fruit in fruits:
    print(f"I like {fruit}")

# While loops - when you don't know how many times
number = 1
while number <= 10:
    print(f"Number: {number}")
    number += 1  # Same as: number = number + 1

# Practical example: Keep asking until valid input
while True:
    user_input = input("Enter 'quit' to exit: ")
    if user_input.lower() == 'quit':
        print("Goodbye!")
        break
    print(f"You entered: {user_input}")`,
            explanation: "Loops let you repeat code. For loops are great when you know how many times, while loops are perfect for 'keep going until...' scenarios."
          }
        ],

        challenge: {
          title: "Text Adventure Game",
          description: "Create a simple text adventure with at least 5 decision points where the player's choices affect the story.",
          starter_code: `print("Welcome to the Mysterious Forest Adventure!")
print("You find yourself at the edge of a dark forest...")

# Your adventure game code here
# Create at least 5 decision points
# Use if/else statements for different paths
# Make it interactive and fun!

choice1 = input("Do you (1) enter the forest or (2) walk around it? ")

if choice1 == "1":
    print("You bravely enter the forest...")
    # Continue the story here
elif choice1 == "2":
    print("You decide to play it safe...")
    # Different story path here
else:
    print("Invalid choice!")`,
          solution: `print("Welcome to the Mysterious Forest Adventure!")
print("You find yourself at the edge of a dark forest...")

choice1 = input("Do you (1) enter the forest or (2) walk around it? ")

if choice1 == "1":
    print("You bravely enter the forest and see a glowing light ahead...")
    choice2 = input("Do you (1) follow the light or (2) hide behind a tree? ")
    
    if choice2 == "1":
        print("The light leads you to a friendly fairy!")
        choice3 = input("Do you (1) ask for help or (2) run away? ")
        
        if choice3 == "1":
            print("The fairy grants you a magic compass!")
            choice4 = input("Do you (1) use it to find treasure or (2) find your way home? ")
            
            if choice4 == "1":
                print("You find a chest of gold! You're rich!")
            else:
                print("You safely return home with magical protection!")
        else:
            print("You run away and get lost in the forest...")
    else:
        print("A wise owl appears and offers you advice...")
        choice5 = input("Do you (1) listen to the owl or (2) ignore it? ")
        
        if choice5 == "1":
            print("The owl tells you about a secret path to safety!")
        else:
            print("You wander the forest all night...")
            
elif choice1 == "2":
    print("You walk around the forest and find a village!")
    print("The villagers welcome you and you have a feast!")
else:
    print("Invalid choice! The forest spirits are confused and send you home.")`
        }
      }
    }

    return content[lessonId] || {
      concept: "Lesson content coming soon!",
      examples: [],
      challenge: { title: "Challenge coming soon!", description: "", starter_code: "", solution: "" }
    }
  }

  const runCode = async () => {
    setIsRunning(true)
    // Simulate code execution
    setTimeout(() => {
      setOutput(`Code executed successfully!\n\nYour code:\n${code}\n\n// Output would appear here in a real Python environment`)
      setIsRunning(false)
    }, 1000)
  }

  const checkSolution = () => {
    // Simple solution checking
    const hasBasicStructure = userSolution.includes('if') && userSolution.includes('input')
    if (hasBasicStructure) {
      setFeedback("Great job! Your solution has the right structure. Keep building on it!")
    } else {
      setFeedback("Try using 'if' statements and 'input()' to make it interactive. Need help? Ask me!")
    }
  }

  const handleCompleteLesson = () => {
    const timeSpent = startTime 
      ? Math.floor((new Date().getTime() - startTime.getTime()) / 60000) 
      : lesson.duration

    completeLesson(lessonId, {
      timeSpent,
      difficultyRating: lesson.difficulty,
      confidenceRating: 4,
      breakthroughMoments: ['Completed interactive lesson successfully'],
      struggledWith: []
    })
    
    window.location.href = '/'
  }

  if (!lesson) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-white mb-4">Lesson Not Found</h1>
          <button 
            onClick={() => window.history.back()}
            className="bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold py-3 px-6 rounded-xl"
          >
            Go Back
          </button>
        </div>
      </div>
    )
  }

  const lessonContent = getLessonContent(lessonId)

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900">
      <div className="max-w-6xl mx-auto p-6">
        
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <button 
            onClick={() => window.history.back()}
            className="p-3 bg-white/10 hover:bg-white/20 text-white rounded-xl transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium text-white/60 bg-white/10 px-2 py-1 rounded-full">
                Week {lesson.week} • {lesson.day}
              </span>
              <div className="flex items-center gap-1 px-2 py-1 rounded-full bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-xs font-semibold">
                <Target className="w-3 h-3" />
                Difficulty {lesson.difficulty}/5
              </div>
            </div>
            <h1 className="text-3xl font-bold text-white">{lesson.title}</h1>
          </div>
          
          <div className="text-right">
            <div className="text-white/60 text-sm">Expected Duration</div>
            <div className="text-xl font-bold text-white flex items-center gap-1">
              <Clock className="w-5 h-5" />
              {Math.floor(lesson.duration / 60)}h {lesson.duration % 60}m
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex gap-2 mb-6">
          {[
            { id: 'concept', label: 'Concept', icon: Lightbulb },
            { id: 'examples', label: 'Examples', icon: Code },
            { id: 'challenge', label: 'Challenge', icon: Trophy },
            { id: 'playground', label: 'Code Playground', icon: Terminal }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all ${
                activeTab === tab.id 
                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white' 
                  : 'bg-white/10 text-white/70 hover:bg-white/20'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              {tab.label}
            </button>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          
          {/* Main Content */}
          <div className="lg:col-span-3">
            
            {/* Concept Tab */}
            {activeTab === 'concept' && (
              <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
                <div className="prose prose-invert max-w-none">
                  <div className="whitespace-pre-wrap text-white/90">
                    {lessonContent.concept}
                  </div>
                </div>
              </div>
            )}

            {/* Examples Tab */}
            {activeTab === 'examples' && (
              <div className="space-y-6">
                {lessonContent.examples.map((example: any, index: number) => (
                  <div key={index} className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
                    <h3 className="text-xl font-bold text-white mb-4">{example.title}</h3>
                    <div className="bg-black/30 rounded-lg p-4 font-mono text-sm text-green-300 mb-4">
                      <pre>{example.code}</pre>
                    </div>
                    <p className="text-white/80">{example.explanation}</p>
                  </div>
                ))}
              </div>
            )}

            {/* Challenge Tab */}
            {activeTab === 'challenge' && (
              <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
                <h3 className="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                  <Trophy className="w-6 h-6 text-yellow-400" />
                  {lessonContent.challenge.title}
                </h3>
                <p className="text-white/80 mb-6">{lessonContent.challenge.description}</p>
                
                {/* Starter Code */}
                <div className="mb-4">
                  <h4 className="text-lg font-semibold text-white mb-2">Starter Code:</h4>
                  <div className="bg-black/30 rounded-lg p-4 font-mono text-sm text-green-300">
                    <pre>{lessonContent.challenge.starter_code}</pre>
                  </div>
                </div>

                {/* User Solution Area */}
                <div className="mb-4">
                  <h4 className="text-lg font-semibold text-white mb-2">Your Solution:</h4>
                  <textarea
                    value={userSolution}
                    onChange={(e) => setUserSolution(e.target.value)}
                    className="w-full h-40 bg-black/30 text-green-300 font-mono text-sm p-4 rounded-lg border border-white/20 focus:border-purple-400 outline-none"
                    placeholder="Write your solution here..."
                  />
                </div>

                <div className="flex gap-3 mb-4">
                  <button
                    onClick={checkSolution}
                    className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-4 py-2 rounded-lg font-medium hover:from-green-600 hover:to-blue-600 transition-all"
                  >
                    Check Solution
                  </button>
                  <button
                    onClick={() => setUserSolution(lessonContent.challenge.solution)}
                    className="bg-white/10 text-white px-4 py-2 rounded-lg font-medium hover:bg-white/20 transition-all"
                  >
                    Show Solution
                  </button>
                </div>

                {feedback && (
                  <div className="bg-blue-900/50 border border-blue-500/50 rounded-lg p-4">
                    <p className="text-blue-200">{feedback}</p>
                  </div>
                )}
              </div>
            )}

            {/* Code Playground Tab */}
            {activeTab === 'playground' && (
              <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
                <h3 className="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                  <Terminal className="w-6 h-6 text-green-400" />
                  Code Playground
                </h3>
                
                <div className="mb-4">
                  <textarea
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    className="w-full h-60 bg-black/30 text-green-300 font-mono text-sm p-4 rounded-lg border border-white/20 focus:border-purple-400 outline-none"
                    placeholder="Write your Python code here..."
                  />
                </div>

                <button
                  onClick={runCode}
                  disabled={isRunning}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-2 rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all disabled:opacity-50 mb-4"
                >
                  {isRunning ? 'Running...' : 'Run Code'}
                </button>

                {output && (
                  <div className="bg-black/30 rounded-lg p-4 font-mono text-sm text-white border border-white/20">
                    <h4 className="text-green-400 mb-2">Output:</h4>
                    <pre>{output}</pre>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            
            {/* Progress */}
            {lessonProgress && (
              <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
                <h3 className="text-lg font-bold text-white mb-4">Your Progress</h3>
                
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white">{lessonProgress.attempts}</div>
                    <div className="text-white/60 text-sm">Attempts</div>
                  </div>
                  
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white">
                      {Math.floor((lessonProgress.timeSpent || 0) / 60)}h {(lessonProgress.timeSpent || 0) % 60}m
                    </div>
                    <div className="text-white/60 text-sm">Time Spent</div>
                  </div>
                  
                  {lessonProgress.completed && (
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-400 flex items-center justify-center gap-2">
                        <CheckCircle2 className="w-6 h-6" />
                        Complete
                      </div>
                      <div className="text-green-300 text-sm">+{lessonProgress.xpEarned} XP</div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Quick Actions */}
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
              <h3 className="text-lg font-bold text-white mb-4">Actions</h3>
              
              <div className="space-y-3">
                {lessonProgress?.completed ? (
                  <button
                    onClick={() => window.location.href = '/'}
                    className="w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white font-semibold py-3 px-4 rounded-xl transition-all duration-300 flex items-center justify-center gap-2"
                  >
                    <CheckCircle2 className="w-4 h-4" />
                    Return to Dashboard
                  </button>
                ) : (
                  <button
                    onClick={handleCompleteLesson}
                    className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-3 px-4 rounded-xl transition-all duration-300 flex items-center justify-center gap-2"
                  >
                    <Trophy className="w-4 h-4" />
                    Complete Lesson
                  </button>
                )}
                
                <button
                  onClick={() => window.location.href = '/'}
                  className="w-full bg-white/10 hover:bg-white/20 text-white font-medium py-3 px-4 rounded-xl transition-all duration-300"
                >
                  Back to Dashboard
                </button>
              </div>
            </div>

            {/* AI Help */}
            <div className="bg-gradient-to-r from-purple-900/50 to-pink-900/50 backdrop-blur-md rounded-2xl p-6 border border-purple-500/20">
              <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <MessageCircle className="w-5 h-5 text-purple-400" />
                Need Help?
              </h3>
              
              <p className="text-white/80 text-sm mb-4">
                Stuck on the code? I'm here to help! You can ask me:
              </p>
              
              <ul className="text-white/70 text-sm space-y-1 mb-4">
                <li>• "Explain this concept again"</li>
                <li>• "Debug my code"</li>
                <li>• "Give me a hint"</li>
                <li>• "How does this work?"</li>
              </ul>
              
              <button className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white font-medium py-2 px-4 rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all">
                Ask Claude for Help
              </button>
            </div>

            {/* Learning Objectives */}
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20">
              <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-blue-400" />
                Today's Goals
              </h3>
              
              <p className="text-white/80 text-sm mb-4">{lesson.target}</p>
              
              <div className="text-white/60 text-sm">
                <strong>What you'll build:</strong><br/>
                {lesson.deliverable}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
